import orjson
import logging

from fastapi import APIRouter, Body, HTTPException, Depends, status, Query
from fastapi.encoders import jsonable_encoder

from sqlalchemy.ext.asyncio import AsyncSession
from source.db.models import User
from source.services.auth import auth_service
from source.services.redis_service import get_redis

from source.crud import crud_contacts
from source.db.connect_db import get_session
from source.schemas.contacts import (
    ResponseContactModel,
    ContactSearchUpdateModel,
    ContactBaseModel,
    CommonQueryParams,
)


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = APIRouter(prefix="/contacts", tags=["Contacts"])


@router.post(
    "/",
    response_model=ResponseContactModel,
    status_code=status.HTTP_201_CREATED,
    summary="Create contact",
)
async def add_contact(
    body: ContactBaseModel,
    db: AsyncSession = Depends(get_session),
    current_user: User = Depends(auth_service.get_current_user),
):
    """
    ***Description:***
    
    This endpoint allows you to create a new contact with the given body parameters. \
    The body should contain the following fields: name, surname, email, phone, birthday. \
    The response will return the created contact object with an additional field id \
    that is automatically generated by the database. The status code for a successful creation is 201
    """
    contact = await crud_contacts.create_contact(body, current_user, db)
    if contact is None:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST, detail="Invalid input data"
        )
    return contact


@router.get(
    "/search",
    response_model=list[ResponseContactModel],
    summary="Search for contacts who meet different criteria",
)
async def get_contacts(
    search: ContactSearchUpdateModel = Depends(),
    current_user: User = Depends(auth_service.get_current_user),
    db: AsyncSession = Depends(get_session),
    query: CommonQueryParams = Depends(),
):
    """
    ***Description:***
    
    This endpoint allows you to search for contacts based on various criteria, \
    such as name, surname, email, phone, or birthday. You can provide any combination \
    of these fields as query parameters, and the response will return a list of contacts \
    that match all of them. You can also specify the limit and offset parameters \
    to control the pagination of the results. The default values are 10 and 0, respectively.
    """

    contacts = await crud_contacts.get_contacts(
        search.model_dump(), current_user, db, query.limit, query.offset
    )
    return contacts


@router.get(
    "/birthdays",
    response_model=list[ResponseContactModel],
    summary="Search for contacts whose birthday is in the next << n >> days",
)
async def get_bd(
    for_days: int = Query(),
    current_user: User = Depends(auth_service.get_current_user),
    db: AsyncSession = Depends(get_session),
):
    """
    ***Description:***
    
    This endpoint allows you to search for contacts \
    who have their birthday in the next << n >> days, where << n >> \
    is a positive integer that you provide as a query parameter. \
    The response will return a list of contacts \
    who have their birthday within that time range, sorted by the closest date.
    """

    contacts = await crud_contacts.get_upcoming_birthdays(for_days, current_user, db)
    return contacts


@router.get(
    "/{contact_id}",
    response_model=ResponseContactModel,
    summary="Search for contacts by ID",
)
async def get_contact(
    contact_id: int,
    current_user: User = Depends(auth_service.get_current_user),
    db: AsyncSession = Depends(get_session),
    # redis=Depends(get_redis),
):
    """
    ***Description:***
    
    This endpoint allows you to retrieve a contact by their ID, \
    which is an integer that is assigned by the database when the contact is created. \
    The response will return the contact object with all its fields. If the contact is not found, \
    the status code will be 404 and the detail will be “contact not found”. \
    This endpoint also uses Redis cache to store and retrieve contact data, \
    which improves the performance and reduces the database load. 
    """
    
    contact = await crud_contacts.get_contact(contact_id, current_user, db)
    if contact is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="Contact not found"
        )
    
    async with get_redis() as redis:
        cache_key = f"contact_id:{contact_id}"
        cache_data = await redis.get(cache_key)
        if cache_data is not None:
            contact_data = orjson.loads(cache_data)

            logger.info(
                f"\nRedis: Contact data for contact_id: {contact_id} retrieved from Redis cache.\n"
            )

            return contact_data
        
        contact_dict = jsonable_encoder(contact)
        serialize_contact = orjson.dumps(contact_dict)
        await redis.set(cache_key, serialize_contact)
        await redis.expire(cache_key, 3600)
        
        logger.info(
            f"\nContact data for contact_id: {contact_id} retrieved from database and set in Redis cache.\n"
        )
        
    return contact


@router.put(
    "/{contact_id}",
    response_model=ResponseContactModel,
    summary="Partial update of contact information",
)
async def update_contact(
    contact_id: int,
    body: ContactSearchUpdateModel = Body(...),
    current_user: User = Depends(auth_service.get_current_user),
    db: AsyncSession = Depends(get_session),
    # redis=Depends(get_redis),
):
    """
    ***Description:***
    
    This endpoint allows you to update some or all of the fields \
    of a contact by their ID. You can provide any combination of these fields as body parameters: \
    name, surname, email, phone, birthday. The response will return the updated contact object \
    with all its fields. If the contact is not found, the status code will be 404 \
    and the detail will be "Contact not found". \
    This endpoint also updates the Redis cache with the new contact data.
    """
    
    contact = await crud_contacts.update_contact(contact_id, body, current_user, db)
    if contact is None:
        raise HTTPException(status_code=404, detail="Contact not found")
    
    async with get_redis() as redis:
        cache_key = f"contact_id:{contact_id}"
        contact_dict = jsonable_encoder(contact)
        serialize_data = orjson.dumps(contact_dict)
        await redis.set(cache_key, serialize_data)
        await redis.expire(cache_key, 3600)

        logger.info(
            f"\nContact data for contact_id: {contact_id} updated in database and Redis cache.\n"
        )

    return contact


@router.delete(
    "/{contact_id}", status_code=status.HTTP_204_NO_CONTENT, summary="Delete contact"
)
async def remove_contact(
    contact_id: int,
    current_user: User = Depends(auth_service.get_current_user),
    db: AsyncSession = Depends(get_session),
    # redis=Depends(get_redis),
):
    """
    ***Description:***
    This endpoint allows you to delete a contact by their ID. \
    The response will not have any content and the status code will be 204. \
    If the contact is not found, the status code will be 404 and the detail will be "Contact not found".
    """
    
    contact = await crud_contacts.delete_contact(contact_id, current_user, db)
    if contact is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="Contact not found"
        )
    
    async with get_redis() as redis:
        cache_key = f"contact_id:{contact_id}"
        cache_data = await redis.get(cache_key)
        if cache_data is not None:
            logger.info(
                f"\nRedis: Cache data for contact_id: {contact_id} deleted from Redis cache.\n"
            )

            await redis.delete(cache_key)

    logger.info(f"\nContact {contact_id} deleted from Database.\n")
    return contact
